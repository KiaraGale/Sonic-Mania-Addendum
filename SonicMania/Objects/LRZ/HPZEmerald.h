#ifndef OBJ_HPZEMERALD_H
#define OBJ_HPZEMERALD_H

#include "Game.h"

typedef enum {
    HPZEMERALD_MASTER,
    HPZEMERALD_EMERALD_LOW,
    HPZEMERALD_EMERALD_HIGH,
} HPZEmeraldTypes;

typedef enum {
    HPZEMERALD_GREEN,
    HPZEMERALD_YELLOW,
    HPZEMERALD_BLUE,
    HPZEMERALD_PURPLE,
    HPZEMERALD_SILVER,
    HPZEMERALD_CYAN,
    HPZEMERALD_RED,
} HPZEmeraldColors;

// Object Class
struct ObjectHPZEmerald {
    RSDK_OBJECT
    uint16 aniFrames;
    uint16 superFrames;
    TABLE(int32 masterColors[11], { 0x202020, 0x302040, 0x202040, 0x303070, 0x203060, 0x204080, 0x206040, 0x308060, 0x40A080, 0x60C0A0, 0x80E0C0 });
    int32 colorStorage[11];
    TABLE(int32 superEmeraldColors[280], {
        0x0E3800, 0x175C00, 0x208000, 0x409800, 0x60B000, 0x80C800, 0xA0E000, 0xBBFA00,
        0x4B3100, 0x855900, 0xB68200, 0xC49D00, 0xD2B616, 0xDDCF4A, 0xEAEA7F, 0xF7F7AE,
        0x141464, 0x1213B5, 0x2829F6, 0x4A4AF7, 0x6868F8, 0x8585F7, 0xA5A5ED, 0xBFC3F2,
        0x340047, 0x50006E, 0x700099, 0x920BB1, 0xB321C8, 0xD539DF, 0xF751F7, 0xFA76F4,
        0x2E2E2E, 0x4C4C4C, 0x6B6B6B, 0x808080, 0x999999, 0xABABAB, 0xBDBDBD, 0xCFCFCF,
        0x002756, 0x0054AC, 0x006CDB, 0x0084F5, 0x29A0FF, 0x5DB9FF, 0x84C7F8, 0xADDBF9,
        0x390000, 0x5F0000, 0x8F0000, 0xB4040D, 0xD21E33, 0xEC3C59, 0xFD5E86, 0xFF87B0,
        0x070736, 0x0B0C5B, 0x1A1A75, 0x4040A0, 0x6060C0, 0x8080E0, 0xAAA8FC, 0xBCBAFD,
        0x240D00, 0x522300, 0x804600, 0xA87F00, 0xD1AF00, 0xE0E000, 0xEAF16F, 0xF6F9C3,
        0x24000E, 0x47001B, 0x6B0040, 0x90276D, 0xC040A0, 0xE060C0, 0xF195E1, 0xF8B0EF,
        0x001A00, 0x004200, 0x007001, 0x00A801, 0x65CC00, 0xA0E000, 0xD1F74A, 0xEEFAB3,
        0x1A0000, 0x380000, 0x610000, 0x990000, 0xD60000, 0xEB385C, 0xF97F8D, 0xFCACAC,
        0x1A1A1A, 0x2B2B2B, 0x404040, 0x656565, 0x898989, 0xA4A4A4, 0xCACACA, 0xDBDBDB,
        0x00191A, 0x002E2E, 0x004747, 0x007D7D, 0x00A7A8, 0x00DDDD, 0x89FAFA, 0xC2F9FA,
        0x001F03, 0x004206, 0x006601, 0x2B8200, 0x48B400, 0x62D100, 0x8BF000, 0xB6FF52,
        0x350808, 0x520A0A, 0x840909, 0xB41B0C, 0xE84200, 0xFF5E0F, 0xFF9829, 0xFFB752,
        0x331C00, 0x4C2E00, 0x6F4900, 0x926700, 0xB89800, 0xD6C004, 0xF1F141, 0xFBFB79,
        0x110D45, 0x1A1367, 0x251D8C, 0x2D2DB3, 0x3C3CEC, 0x5C5CFF, 0x7D7DFF, 0xA8A9FF,
        0x001F3D, 0x00335C, 0x004875, 0x006091, 0x008EA8, 0x00BFB3, 0x40F2AD, 0x98F6C0,
        0x17002E, 0x230047, 0x300061, 0x420087, 0x6200C4, 0x840EF1, 0xAB49FF, 0xC980FF,
        0x1F0010, 0x3D001D, 0x5A0024, 0x7B0029, 0xB8001A, 0xDC0000, 0xFF4229, 0xFF7A52,
        0x003799, 0x0059C2, 0x0077D6, 0x0099D9, 0x00BEE0, 0x3DDBEE, 0x7FFFFA, 0xB8FFFC,
        0x2E003D, 0x3D0052, 0x550072, 0x6B008F, 0x8000C0, 0xAE29EC, 0xD35AF2, 0xEB92F7,
        0x420000, 0x610000, 0x890000, 0xAA0000, 0xD00000, 0xF2214D, 0xFF4791, 0xFF85C4,
        0x6F1B65, 0x9B2293, 0xC026BB, 0xDD38E0, 0xF455EE, 0xFF75F2, 0xFFA3FF, 0xFFCCFF,
        0x614700, 0x8A6A00, 0xA88700, 0xC7A600, 0xE0C000, 0xF2DA3B, 0xF2E88D, 0xF6F4D0,
        0x004200, 0x096100, 0x207F00, 0x3E9A00, 0x5EBC00, 0x94E000, 0xBAF155, 0xDDF4B3,
        0x363636, 0x575757, 0x6A6A6A, 0x808080, 0xA0A0A0, 0xC0C0C0, 0xDBDBDB, 0xF0F0F0,
        0x022202, 0x014603, 0x016502, 0x009401, 0x00CC01, 0x8AEF04, 0xC1FF47, 0xE8FFAD,
        0x532213, 0x863718, 0xB85B19, 0xE18A0E, 0xF7BA36, 0xFFD513, 0xFFEE66, 0xF8FAB8,
        0x420035, 0x61004E, 0x8A006E, 0xB2008F, 0xDA1BB1, 0xFF52D4, 0xFF9EDC, 0xFFD1EE,
        0x171146, 0x181452, 0x1F1F7F, 0x212CC0, 0x3E4AE8, 0x7171FF, 0x9D98FF, 0xC5C2FF,
        0x393243, 0x524860, 0x665D7C, 0x807BA1, 0xACACD3, 0xC9C9F8, 0xDBDBFA, 0xF1F1F8,
        0x38000E, 0x5C0011, 0x82000F, 0xA60000, 0xE71B1B, 0xF6692C, 0xF69346, 0xF9BA76,
        0x192948, 0x243F66, 0x345493, 0x4979C1, 0x669FD6, 0x98C1EB, 0xB8D5EF, 0xD5E6F6
    });
    TABLE(int32 relicColors[8], { 0x202020, 0x383040, 0x484868, 0x587090, 0x80A0B0, 0x98C0C8, 0xB0D8D8, 0xC8E8E0 });
    bool32 emeraldsTransfered;
    uint16 sfxSpecialWarp;
};

// Entity Class
struct EntityHPZEmerald {
    RSDK_ENTITY
    StateMachine(state); // unused
    uint8 type;
    bool32 solid;
    Vector2 startPos;
    Hitbox *hitbox;
    Animator emeraldAnimator;
    Animator overlayAnimator;
    int32 emeraldID; // for determining color
    int32 linearID; // for defining left --> right order
    bool32 superEmeraldObtained; // stone vs. active
    bool32 forceActive;
    bool32 overlayOnly;
    int32 timer;
    int32 warpTimer;
    int32 overlayTimer;
};

// Object Struct
extern ObjectHPZEmerald *HPZEmerald;

// Standard Entity Events
void HPZEmerald_Update(void);
void HPZEmerald_LateUpdate(void);
void HPZEmerald_StaticUpdate(void);
void HPZEmerald_Draw(void);
void HPZEmerald_Create(void *data);
void HPZEmerald_StageLoad(void);
#if GAME_INCLUDE_EDITOR
void HPZEmerald_EditorDraw(void);
void HPZEmerald_EditorLoad(void);
#endif
void HPZEmerald_Serialize(void);

// Extra Entity Functions
void HPZEmerald_HandleSpecialStageWarp(void);

#endif //! OBJ_HPZEMERALD_H
